import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "@/components/ui/collapsible";
import { 
  MessageSquare, 
  FileText, 
  Printer, 
  ChevronDown, 
  AlertTriangle, 
  Info, 
  XCircle,
  CheckCircle2,
  Clock
} from "lucide-react";
import { BackendResponse } from "@/types/plant-passport";

interface ResultsProps {
  response: BackendResponse | null;
  isLoading: boolean;
}

export function Results({ response, isLoading }: ResultsProps) {
  const [isStructuredOpen, setIsStructuredOpen] = useState(true);

  const handlePrint = () => {
    const printContent = document.getElementById('structured-results');
    if (printContent) {
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(`
          <html>
            <head>
              <title>PlantPassport.ai - Movement Requirements</title>
              <style>
                body { font-family: system-ui, sans-serif; margin: 0; padding: 20px; }
                .print-header { margin-bottom: 30px; padding-bottom: 20px; border-bottom: 2px solid #ccc; }
                .print-header h1 { margin: 0; color: #22543d; }
                .print-header p { margin: 5px 0 0 0; color: #666; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ccc; padding: 12px; text-align: left; }
                th { background-color: #f8f9fa; font-weight: 600; }
                .severity-warning { background-color: #fff3cd; }
                .severity-blocked { background-color: #f8d7da; }
                .severity-info { background-color: #d1ecf1; }
                ul { margin: 8px 0; padding-left: 20px; }
                .print-footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 12px; color: #666; }
              </style>
            </head>
            <body>
              <div class="print-header">
                <h1>ðŸŒ¿ PlantPassport.ai</h1>
                <p>Plant Movement Requirements Report</p>
                <p>Generated: ${new Date().toLocaleDateString('en-AU')} ${new Date().toLocaleTimeString('en-AU')}</p>
              </div>
              ${printContent.innerHTML}
              <div class="print-footer">
                <p>This report was generated by PlantPassport.ai. Always verify current requirements with relevant authorities.</p>
              </div>
            </body>
          </html>
        `);
        printWindow.document.close();
        printWindow.print();
      }
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'warning':
        return <AlertTriangle className="w-4 h-4 text-warning" />;
      case 'blocked':
        return <XCircle className="w-4 h-4 text-destructive" />;
      case 'info':
        return <Info className="w-4 h-4 text-primary" />;
      default:
        return <CheckCircle2 className="w-4 h-4 text-success" />;
    }
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case 'warning':
        return <Badge variant="secondary" className="bg-warning/10 text-warning-foreground">Warning</Badge>;
      case 'blocked':
        return <Badge variant="destructive">Blocked</Badge>;
      case 'info':
        return <Badge variant="secondary">Info</Badge>;
      default:
        return <Badge variant="secondary" className="bg-success/10 text-success-foreground">OK</Badge>;
    }
  };

  if (isLoading) {
    return (
      <Card className="shadow-medium">
        <CardHeader>
          <div className="flex items-center gap-2">
            <Clock className="w-5 h-5 text-primary animate-spin" />
            <CardTitle>Checking requirements...</CardTitle>
          </div>
          <CardDescription>
            Analyzing plant movement regulations and requirements
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-3">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-4/5" />
            <Skeleton className="h-4 w-3/4" />
          </div>
          <div className="space-y-2">
            <Skeleton className="h-8 w-32" />
            <Skeleton className="h-20 w-full" />
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!response) {
    return null;
  }

  return (
    <div className="space-y-6">
      <Card className="shadow-medium">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CheckCircle2 className="w-5 h-5 text-success" />
            Requirements Found
          </CardTitle>
          <CardDescription>
            Movement from {response.structured.origin} to {response.structured.destination}
            {response.structured.zoneContext && ` â€¢ ${response.structured.zoneContext}`}
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          <Tabs defaultValue="answer" className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="answer" className="flex items-center gap-2">
                <MessageSquare className="w-4 h-4" />
                Answer
              </TabsTrigger>
              <TabsTrigger value="structured" className="flex items-center gap-2">
                <FileText className="w-4 h-4" />
                Structured
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="answer" className="space-y-4">
              <div className="prose prose-sm max-w-none">
                <p className="text-foreground leading-relaxed">{response.answer}</p>
              </div>
            </TabsContent>
            
            <TabsContent value="structured" className="space-y-4">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold">Detailed Requirements</h3>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={handlePrint}
                  className="print-hidden flex items-center gap-2"
                >
                  <Printer className="w-4 h-4" />
                  Print / Save PDF
                </Button>
              </div>
              
              <div id="structured-results">
                <div className="print-only print-header">
                  <h1>ðŸŒ¿ PlantPassport.ai</h1>
                  <p>Plant Movement Requirements Report</p>
                  <p>Generated: {new Date().toLocaleDateString('en-AU')} {new Date().toLocaleTimeString('en-AU')}</p>
                </div>
                
                <div className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="space-y-1">
                      <p className="text-sm text-muted-foreground">Commodity</p>
                      <p className="font-medium capitalize">{response.structured.commodity}</p>
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm text-muted-foreground">Origin</p>
                      <p className="font-medium">{response.structured.origin}</p>
                    </div>
                    <div className="space-y-1">
                      <p className="text-sm text-muted-foreground">Destination</p>
                      <p className="font-medium">{response.structured.destination}</p>
                    </div>
                  </div>

                  {response.structured.zoneContext && (
                    <div className="p-3 bg-muted/50 rounded-lg">
                      <p className="text-sm font-medium">Zone Context</p>
                      <p className="text-sm text-muted-foreground">{response.structured.zoneContext}</p>
                    </div>
                  )}

                  <div className="space-y-3">
                    <h4 className="font-semibold">Requirements & Actions</h4>
                    {response.structured.rules.map((rule, index) => (
                      <Collapsible key={index} defaultOpen>
                        <CollapsibleTrigger className="flex items-center justify-between w-full p-4 text-left bg-card border rounded-lg hover:bg-muted/50 transition-colors">
                          <div className="flex items-center gap-3">
                            {getSeverityIcon(rule.severity)}
                            <div>
                              <p className="font-medium">{rule.title}</p>
                              {rule.code && (
                                <p className="text-sm text-muted-foreground">{rule.code}</p>
                              )}
                            </div>
                          </div>
                          <div className="flex items-center gap-2">
                            {getSeverityBadge(rule.severity)}
                            <ChevronDown className="w-4 h-4" />
                          </div>
                        </CollapsibleTrigger>
                        
                        <CollapsibleContent className="p-4 border-x border-b rounded-b-lg">
                          <div className="space-y-4">
                            <div>
                              <h5 className="font-medium mb-2">Requirement</h5>
                              <p className="text-sm text-muted-foreground">{rule.requirement}</p>
                            </div>
                            
                            <div>
                              <h5 className="font-medium mb-2">Required Actions</h5>
                              <ul className="text-sm text-muted-foreground space-y-1">
                                {rule.actions.map((action, actionIndex) => (
                                  <li key={actionIndex} className="flex items-start gap-2">
                                    <span className="w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0" />
                                    {action}
                                  </li>
                                ))}
                              </ul>
                            </div>
                            
                            {rule.documents && rule.documents.length > 0 && (
                              <div>
                                <h5 className="font-medium mb-2">Required Documents</h5>
                                <div className="flex flex-wrap gap-2">
                                  {rule.documents.map((doc, docIndex) => (
                                    <Badge key={docIndex} variant="outline" className="text-xs">
                                      {doc}
                                    </Badge>
                                  ))}
                                </div>
                              </div>
                            )}
                            
                            {rule.references && rule.references.length > 0 && (
                              <div>
                                <h5 className="font-medium mb-2">References</h5>
                                <div className="space-y-1">
                                  {rule.references.map((ref, refIndex) => (
                                    <p key={refIndex} className="text-xs text-muted-foreground">
                                      {ref}
                                    </p>
                                  ))}
                                </div>
                              </div>
                            )}
                          </div>
                        </CollapsibleContent>
                      </Collapsible>
                    ))}
                  </div>
                </div>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}